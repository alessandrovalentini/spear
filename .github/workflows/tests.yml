name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r webservice/requirements-dev.txt

      - name: Run tests with coverage
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
          verbose: true

  arduino-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board:
          #- arduino:avr:uno
          #- arduino:avr:mega
          - arduino:avr:nano

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Install board core
        run: |
          arduino-cli core update-index
          arduino-cli core install arduino:avr

      - name: Compile main sketch
        run: make arduino-build

  build-deb:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Arduino CLI
        uses: arduino/setup-arduino-cli@v1

      - name: Install board core
        run: |
          arduino-cli core update-index
          arduino-cli core install arduino:avr

      - name: Install Debian packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential debhelper devscripts dh-python fakeroot \
            python3-venv python3-pip python3-httpx systemd avrdude

      - name: Build .deb package
        run: make deb

      - name: Collect .deb artifacts
        id: collect_deb
        run: |
          mapfile -t DEBS < <(find ../ -maxdepth 1 -type f -name "*.deb" ! -name "*-dbgsym*.deb")
          if [ "${#DEBS[@]}" -eq 0 ]; then
            echo "Error! No .deb package found after make deb."; exit 1
          fi
          mkdir -p dist
          cp -v "${DEBS[@]}" dist/
          ls -l dist

      - name: Upload .deb artifact
        uses: actions/upload-artifact@v4
        with:
          name: deb-package
          path: dist/*.deb
          if-no-files-found: error
          retention-days: 7

  raspi-install-test:
    runs-on: ubuntu-latest
    needs: [build-deb]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/arm/v7
          - linux/arm64/v8

    steps:
      - name: Download .deb artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: deb

      - name: Enable QEMU for ARM
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Verify install on ${{ matrix.platform }} container
        run: |
          docker run --rm \
            --platform ${{ matrix.platform }} \
            -v "$PWD:/work" -w /work \
            debian:bookworm bash -lc '
              set -euo pipefail
              apt-get update
              apt-get install -y ./deb/*.deb || (dpkg -i ./deb/*.deb && apt-get -f install -y)
              dpkg -l | grep "^ii" >/dev/null
            '
